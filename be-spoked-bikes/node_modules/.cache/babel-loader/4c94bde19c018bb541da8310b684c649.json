{"ast":null,"code":"import _defineProperty from \"D:\\\\Development\\\\Profisee\\\\be-spoked-bikes\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"D:\\\\Development\\\\Profisee\\\\be-spoked-bikes\\\\src\\\\components\\\\Pages\\\\Salesperson\\\\Edit\\\\SalespersonEdit.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component, ReactDOM } from 'react';\nimport axios from '../../../../axios';\nimport Aux from '../../../../hoc/Auxiliary/Auxiliary';\nimport Spinner from '../../../UI/Spinner/Spinner';\nimport Button from '../../../UI/Button/Button';\nimport classes from './SalespersonEdit.module.css';\nimport Input from '../../../UI/Input/Input';\n\nclass SalespersonEdit extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      salesperson: null,\n      loading: false,\n      error: false,\n      salespersonForm: {\n        Id: null,\n        FirstName: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'First Name'\n          },\n          value: ''\n        },\n        LastName: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Last Name'\n          },\n          value: ''\n        },\n        Address: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'textarea',\n            placeholder: 'Full Address'\n          },\n          value: ''\n        },\n        Phone: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Phone'\n          },\n          value: ''\n        },\n        Manager: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Manager'\n          },\n          value: ''\n        }\n      }\n    };\n\n    this.submitHandler = event => {\n      // this.state.inputs.map( function(item, i) {\n      //   console.log(ReactDOM.findDOMNode(this.refs['input-' + i]).value);\n      // }.bind(this))\n      event.preventDefault();\n      this.setState({\n        loading: true\n      });\n      const formData = {};\n\n      for (let formElementIdentifier in this.state.salespersonForm) {\n        formData[formElementIdentifier] = this.state.salespersonForm[formElementIdentifier];\n      }\n\n      const submission = {\n        formData: formData\n      };\n      const pathname = this.props.location.pathname;\n      axios.put('/api/Salespersons/' + pathname.substring(pathname.lastIndexOf('/'), pathname.length), formData).then(response => {\n        this.setState({\n          loading: false\n        });\n        this.props.history.push('/');\n      }).catch(error => {\n        console.log(error);\n        this.setState({\n          loading: false,\n          error: true\n        });\n      });\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      const updatedForm = _objectSpread({}, this.state.salespersonForm);\n\n      const updatedFormElement = _objectSpread({}, updatedForm[inputIdentifier]);\n\n      updatedFormElement.value = event.target.value;\n      updatedForm[inputIdentifier] = updatedFormElement;\n      this.setState({\n        salespersonForm: updatedForm\n      });\n    };\n  }\n\n  componentDidMount() {\n    console.log('[SalespersonEdit] props = ', this.props);\n    const pathname = this.props.location.pathname;\n    axios.get('/api/Salespersons/' + pathname.substring(pathname.lastIndexOf('/'), pathname.length)).then(response => {\n      this.setState({\n        salesperson: response.data\n      });\n    }).catch(error => {\n      console.log(error);\n      this.setState({\n        error: true\n      });\n    });\n  }\n\n  render() {\n    let form = null;\n    const formElementsArray = [];\n\n    for (let key in this.state.salespersonForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.salespersonForm[key]\n      });\n    }\n\n    if (this.state.salesperson) {\n      form = React.createElement(\"ul\", {\n        className: classes.Form,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, formElementsArray.map(formElement => React.createElement(\"ul\", {\n        key: formElement.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, formElement.config.elementConfig.placeholder, \":\"), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(Input, {\n        elementType: formElement.config.elementType,\n        elementConfig: formElement.config.elementConfig,\n        value: formElement.config.value,\n        changed: event => this.inputChangedHandler(event, formElement.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }))))));\n    } else if (this.state.error) {\n      form = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, \"An error has occurred.\");\n    } else {\n      form = React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(Aux, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.submitHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \"Edit Salesperson\"), form, React.createElement(Button, {\n      btnType: \"Danger\",\n      clicked: this.props.editCancelled,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"CANCEL\"), React.createElement(Button, {\n      btnType: \"Success\",\n      clicked: event => {\n        this.submitHandler(event);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, \"CONTINUE\")));\n  }\n\n}\n\nexport default SalespersonEdit;","map":{"version":3,"sources":["D:/Development/Profisee/be-spoked-bikes/src/components/Pages/Salesperson/Edit/SalespersonEdit.js"],"names":["React","Component","ReactDOM","axios","Aux","Spinner","Button","classes","Input","SalespersonEdit","state","salesperson","loading","error","salespersonForm","Id","FirstName","elementType","elementConfig","type","placeholder","value","LastName","Address","Phone","Manager","submitHandler","event","preventDefault","setState","formData","formElementIdentifier","submission","pathname","props","location","put","substring","lastIndexOf","length","then","response","history","push","catch","console","log","inputChangedHandler","inputIdentifier","updatedForm","updatedFormElement","target","componentDidMount","get","data","render","form","formElementsArray","key","id","config","Form","map","formElement","editCancelled"],"mappings":"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","sourcesContent":["import React, { Component, ReactDOM } from 'react';\r\nimport axios from '../../../../axios';\r\nimport Aux from '../../../../hoc/Auxiliary/Auxiliary';\r\nimport Spinner from '../../../UI/Spinner/Spinner';\r\nimport Button from '../../../UI/Button/Button';\r\nimport classes from './SalespersonEdit.module.css';\r\nimport Input from '../../../UI/Input/Input';\r\n\r\nclass SalespersonEdit extends Component {\r\n\r\n    state = {\r\n        salesperson: null,\r\n        loading: false,\r\n        error: false,\r\n        salespersonForm: {\r\n            Id: null,\r\n            FirstName: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'First Name'\r\n                },\r\n                value: ''\r\n            },\r\n            LastName: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Last Name'\r\n                },\r\n                value: ''\r\n            },\r\n            Address: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'textarea',\r\n                    placeholder: 'Full Address'\r\n                },\r\n                value: ''\r\n            },\r\n            Phone: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Phone'\r\n                },\r\n                value: ''\r\n            },\r\n            Manager: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Manager'\r\n                },\r\n                value: ''\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount () {\r\n        console.log('[SalespersonEdit] props = ', this.props);\r\n        const pathname = this.props.location.pathname;\r\n        axios.get('/api/Salespersons/' + pathname.substring(pathname.lastIndexOf('/'), pathname.length))\r\n            .then(response => {\r\n                this.setState({ salesperson: response.data });\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                this.setState({ error: true })\r\n            });\r\n    }\r\n\r\n    submitHandler = ( event ) => {\r\n        // this.state.inputs.map( function(item, i) {\r\n        //   console.log(ReactDOM.findDOMNode(this.refs['input-' + i]).value);\r\n        // }.bind(this))\r\n\r\n        event.preventDefault();\r\n        this.setState({ loading: true });\r\n        const formData = {};\r\n        for (let formElementIdentifier in this.state.salespersonForm) {\r\n            formData[formElementIdentifier] = this.state.salespersonForm[formElementIdentifier];\r\n        }\r\n        const submission = {\r\n            formData: formData\r\n        }\r\n        const pathname = this.props.location.pathname;\r\n        axios.put(\r\n            '/api/Salespersons/' + pathname.substring(pathname.lastIndexOf('/'), pathname.length), formData)\r\n            .then(response => {\r\n                this.setState({ loading: false });\r\n                this.props.history.push('/');\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                this.setState({ loading: false, error: true })\r\n            });\r\n\r\n    }\r\n\r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n        const updatedForm = {\r\n            ...this.state.salespersonForm\r\n        };\r\n        const updatedFormElement = {\r\n            ...updatedForm[inputIdentifier]\r\n        };\r\n        updatedFormElement.value = event.target.value;\r\n        updatedForm[inputIdentifier] = updatedFormElement;\r\n        this.setState({ salespersonForm: updatedForm });\r\n    }\r\n\r\n    render() {\r\n        let form = null;\r\n        const formElementsArray = [];\r\n        for (let key in this.state.salespersonForm) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.salespersonForm[key]\r\n            });\r\n        }\r\n        if (this.state.salesperson) {\r\n            form = (\r\n                <ul className={ classes.Form }>\r\n                    <li>\r\n                        {formElementsArray.map(formElement => (\r\n                            <ul key={formElement.id}>\r\n                                <li>{formElement.config.elementConfig.placeholder}:</li>\r\n                                <li>\r\n                                    <Input \r\n                                        elementType={formElement.config.elementType}\r\n                                        elementConfig={formElement.config.elementConfig}\r\n                                        value={formElement.config.value} \r\n                                        changed={(event) => this.inputChangedHandler(event, formElement.id)} />\r\n                                </li>\r\n                            </ul>\r\n                        ))}\r\n                    </li>\r\n                </ul>\r\n            );\r\n        } else if (this.state.error) {\r\n            form = (\r\n                <div>An error has occurred.</div>\r\n            );\r\n        } else {\r\n            form = <Spinner />;\r\n        }\r\n        return (\r\n            <Aux>\r\n                <form onSubmit={this.submitHandler}>\r\n                    <h3>Edit Salesperson</h3>\r\n                    {form}\r\n                    <Button \r\n                        btnType=\"Danger\"\r\n                        clicked={this.props.editCancelled}>CANCEL</Button>\r\n                    <Button \r\n                        btnType=\"Success\"\r\n                        clicked={(event) => {this.submitHandler(event)}}>CONTINUE</Button>\r\n                </form>\r\n            </Aux>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SalespersonEdit;"]},"metadata":{},"sourceType":"module"}
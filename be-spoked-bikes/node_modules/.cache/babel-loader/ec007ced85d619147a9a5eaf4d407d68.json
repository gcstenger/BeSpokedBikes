{"ast":null,"code":"var _jsxFileName = \"D:\\\\Development\\\\Profisee\\\\be-spoked-bikes\\\\src\\\\components\\\\Pages\\\\Salesperson\\\\Edit\\\\SalespersonEdit.js\";\nimport React, { Component, ReactDOM } from 'react';\nimport axios from '../../../../axios';\nimport Aux from '../../../../hoc/Auxiliary/Auxiliary';\nimport Spinner from '../../../UI/Spinner/Spinner';\nimport Button from '../../../UI/Button/Button';\nimport classes from './SalespersonEdit.module.css';\nimport Input from '../../../UI/Input/Input';\n\nclass SalespersonEdit extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      salesperson: null,\n      error: false,\n      salespersonForm: {\n        firstName: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'First Name'\n          },\n          value: ''\n        },\n        lastName: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Last Name'\n          },\n          value: ''\n        },\n        address: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'textarea',\n            placeholder: 'Full Address'\n          },\n          value: ''\n        },\n        phone: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Phone'\n          },\n          value: ''\n        },\n        manager: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Manager'\n          },\n          value: ''\n        }\n      }\n    };\n\n    this.submitHandler = event => {\n      this.state.inputs.map(function (item, i) {\n        console.log(ReactDOM.findDOMNode(this.refs['input-' + i]).value);\n      }.bind(this));\n    };\n  }\n\n  componentDidMount() {\n    console.log('[SalespersonEdit] props = ', this.props);\n    const pathname = this.props.location.pathname;\n    axios.get('/api/Salespersons/' + pathname.substring(pathname.lastIndexOf('/'), pathname.length)).then(response => {\n      this.setState({\n        salesperson: response.data\n      });\n    }).catch(error => {\n      console.log(error);\n      this.setState({\n        error: true\n      });\n    });\n  }\n\n  render() {\n    let form = null;\n    const formElementsArray = [];\n\n    for (let key in this.state.salespersonForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.salespersonForm[key]\n      });\n    }\n\n    if (this.state.salesperson) {\n      form = React.createElement(\"ul\", {\n        className: classes.Form,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, formElementsArray.map(formElement => React.createElement(\"ul\", {\n        key: formElement.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, formElement.config), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(Input, {\n        elementType: formElement.config.elementType,\n        elementConfig: formElement.config.elementConfig,\n        value: formElement.config.value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }))))));\n    } else if (this.state.error) {\n      form = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"An error has occurred.\");\n    } else {\n      form = React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(Aux, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.submitHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"Edit Salesperson\"), form, React.createElement(Button, {\n      btnType: \"Danger\",\n      clicked: this.props.editCancelled,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"CANCEL\"), React.createElement(Button, {\n      btnType: \"Success\",\n      clicked: this.props.editContinued,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"CONTINUE\")));\n  }\n\n}\n\nexport default SalespersonEdit;","map":{"version":3,"sources":["D:/Development/Profisee/be-spoked-bikes/src/components/Pages/Salesperson/Edit/SalespersonEdit.js"],"names":["React","Component","ReactDOM","axios","Aux","Spinner","Button","classes","Input","SalespersonEdit","state","salesperson","error","salespersonForm","firstName","elementType","elementConfig","type","placeholder","value","lastName","address","phone","manager","submitHandler","event","inputs","map","item","i","console","log","findDOMNode","refs","bind","componentDidMount","props","pathname","location","get","substring","lastIndexOf","length","then","response","setState","data","catch","render","form","formElementsArray","key","push","id","config","Form","formElement","editCancelled","editContinued"],"mappings":"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","sourcesContent":["import React, { Component, ReactDOM } from 'react';\r\nimport axios from '../../../../axios';\r\nimport Aux from '../../../../hoc/Auxiliary/Auxiliary';\r\nimport Spinner from '../../../UI/Spinner/Spinner';\r\nimport Button from '../../../UI/Button/Button';\r\nimport classes from './SalespersonEdit.module.css';\r\nimport Input from '../../../UI/Input/Input';\r\n\r\nclass SalespersonEdit extends Component {\r\n\r\n    state = {\r\n        salesperson: null,\r\n        error: false,\r\n        salespersonForm: {\r\n            firstName: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'First Name'\r\n                },\r\n                value: ''\r\n            },\r\n            lastName: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Last Name'\r\n                },\r\n                value: ''\r\n            },\r\n            address: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'textarea',\r\n                    placeholder: 'Full Address'\r\n                },\r\n                value: ''\r\n            },\r\n            phone: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Phone'\r\n                },\r\n                value: ''\r\n            },\r\n            manager: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Manager'\r\n                },\r\n                value: ''\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount () {\r\n        console.log('[SalespersonEdit] props = ', this.props);\r\n        const pathname = this.props.location.pathname;\r\n        axios.get('/api/Salespersons/' + pathname.substring(pathname.lastIndexOf('/'), pathname.length))\r\n            .then(response => {\r\n                this.setState({ salesperson: response.data });\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                this.setState({ error: true })\r\n            });\r\n    }\r\n\r\n    submitHandler = ( event ) => {\r\n        this.state.inputs.map( function(item, i) {\r\n          console.log(ReactDOM.findDOMNode(this.refs['input-' + i]).value);\r\n        }.bind(this))\r\n    }\r\n\r\n    render() {\r\n        let form = null;\r\n        const formElementsArray = [];\r\n        for (let key in this.state.salespersonForm) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.salespersonForm[key]\r\n            });\r\n        }\r\n        if (this.state.salesperson) {\r\n            form = (\r\n                <ul className={ classes.Form }>\r\n                    <li>\r\n                        {formElementsArray.map(formElement => (\r\n                            <ul key={formElement.id}>\r\n                                <li>{formElement.config}</li>\r\n                                <li>\r\n                                    <Input \r\n                                        elementType={formElement.config.elementType}\r\n                                        elementConfig={formElement.config.elementConfig}\r\n                                        value={formElement.config.value} />\r\n                                </li>\r\n                            </ul>\r\n                        ))}\r\n                    </li>\r\n                </ul>\r\n            );\r\n        } else if (this.state.error) {\r\n            form = (\r\n                <div>An error has occurred.</div>\r\n            );\r\n        } else {\r\n            form = <Spinner />;\r\n        }\r\n        return (\r\n            <Aux>\r\n                <form onSubmit={this.submitHandler}>\r\n                    <h3>Edit Salesperson</h3>\r\n                    {form}\r\n                    <Button \r\n                        btnType=\"Danger\"\r\n                        clicked={this.props.editCancelled}>CANCEL</Button>\r\n                    <Button \r\n                        btnType=\"Success\"\r\n                        clicked={this.props.editContinued}>CONTINUE</Button>\r\n                </form>\r\n            </Aux>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SalespersonEdit;"]},"metadata":{},"sourceType":"module"}